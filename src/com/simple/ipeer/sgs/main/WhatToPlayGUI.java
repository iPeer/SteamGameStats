/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

package com.simple.ipeer.sgs.main;

import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author iPeer
 */
public class WhatToPlayGUI extends javax.swing.JDialog {
    
    private static List<String> autoBannedAIDs = new ArrayList<String>();
    private static final String bannedAIDList = "65920,40940,50110,8990,22470,72730,72740,73035,73037,73031,73054,73036,42918,73030,207080,42918";
    private ArrayList<Object[]> gameCache = null;
    private MainGUI mainGUI;
    private Object[] currentGame;
    
    /**
     * Creates new form WhatToPlayGUI
     */
    public WhatToPlayGUI(MainGUI main) {
	autoBannedAIDs = Arrays.asList(bannedAIDList.split(","));
	this.mainGUI = main;
	initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameImage = new javax.swing.JLabel();
        gameName = new javax.swing.JLabel();
        gameStats = new javax.swing.JLabel();
        launchGame = new javax.swing.JButton();
        doNotShow = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        pickAnother = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        gameImage.setMaximumSize(new java.awt.Dimension(185, 70));
        gameImage.setMinimumSize(new java.awt.Dimension(185, 70));
        gameImage.setPreferredSize(new java.awt.Dimension(185, 70));

        gameName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        gameName.setMinimumSize(new java.awt.Dimension(283, 14));
        gameName.setPreferredSize(new java.awt.Dimension(283, 14));

        gameStats.setMinimumSize(new java.awt.Dimension(283, 14));
        gameStats.setPreferredSize(new java.awt.Dimension(283, 14));

        launchGame.setText("Launch/Installl Game");
        launchGame.setEnabled(false);
        launchGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchGameActionPerformed(evt);
            }
        });

        doNotShow.setText("Don't Show This Again");
        doNotShow.setToolTipText("Getting a DLC item or a game you really hate? This button will stop it ever being picked again");
        doNotShow.setEnabled(false);
        doNotShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doNotShowActionPerformed(evt);
            }
        });

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        pickAnother.setText("Pick me Another!");
        pickAnother.setEnabled(false);
        pickAnother.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickAnotherActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gameImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gameName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gameStats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(launchGame, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pickAnother, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(doNotShow, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(gameImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gameName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gameStats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(launchGame)
                            .addComponent(doNotShow)
                            .addComponent(pickAnother))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
	this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void pickAnotherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickAnotherActionPerformed
	pickGame();
    }//GEN-LAST:event_pickAnotherActionPerformed
    
    private void doNotShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doNotShowActionPerformed
	if (JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to stop this game from showing up? It will NEVER be able to come up again.", "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
	    String currentAppID = currentGame[0].toString();
	    String currentBanList = mainGUI.config.getProperty("bannedAIDs", "");
	    currentBanList += (currentBanList.length() > 0 ? "," : "")+currentAppID;
	    mainGUI.config.setProperty("bannedAIDs", currentBanList);
	    mainGUI.saveSettings();
	    pickGame();
	}
    }//GEN-LAST:event_doNotShowActionPerformed
    
    private void launchGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchGameActionPerformed
	try {
	    Desktop.getDesktop().browse(new URI("steam://run/"+currentGame[0]));
	} catch (Throwable ex) {
	    JOptionPane.showMessageDialog(rootPane, "An error ocurred while trying to launch this game:\n"+ex.toString()+"\nYou're going to have to launch it yourself :(", "Oops!", JOptionPane.ERROR_MESSAGE);
	}
    }//GEN-LAST:event_launchGameActionPerformed
    
    
    public void setGameCache(ArrayList<Object[]> o) {
	this.gameCache = o;
    }
    
    public void pickGame() {
	new Thread(
		new Runnable() {
		    public void run() {
			launchGame.setEnabled(false);
			doNotShow.setEnabled(false);
			pickAnother.setEnabled(false);
			gameStats.setText("");
			gameImage.setIcon(null);
			List<String> bannedAppIDs = Arrays.asList(mainGUI.config.getProperty("bannedAIDs", "").split(","));
			Random r = new Random();
			Object[] game = null;
			int gameChecks = 0;
			int maxGameChecks = 20;
			while (true) {
			    game = gameCache.get(r.nextInt(gameCache.size()));
			    if ((bannedAppIDs.contains(game[0].toString()) || autoBannedAIDs.contains(game[0].toString()))) {
				System.err.println("App ID "+game[0]+" ("+game[1]+") was skipped because it is blacklisted.");
				continue;
			    }
			    gameName.setText(game[1].toString());
			    gameStats.setText(game[2]+" hours played.");
			    if (/*r.nextInt(gameCache.size()) % 15 == 0 || */gameChecks++ == maxGameChecks) {
				currentGame = game;
				break;
			    }
			    try {
				Thread.sleep(50 + ((gameChecks % maxGameChecks) * (gameChecks == maxGameChecks ? 20 : 10)));
			    } catch (InterruptedException ex) {	}
			}
			
			try {
			    gameImage.setIcon(new ImageIcon(ImageIO.read(new URL(game[7].toString()))));
			} catch (IOException ex) {
			    Logger.getLogger(WhatToPlayGUI.class.getName()).log(Level.SEVERE, null, ex);
			}
			launchGame.setEnabled(true);
			doNotShow.setEnabled(true);
			pickAnother.setEnabled(true);
		    }}).start();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton doNotShow;
    private javax.swing.JLabel gameImage;
    private javax.swing.JLabel gameName;
    private javax.swing.JLabel gameStats;
    private javax.swing.JButton launchGame;
    private javax.swing.JButton pickAnother;
    // End of variables declaration//GEN-END:variables
}
