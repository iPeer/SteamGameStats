/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

package com.simple.ipeer.sgs.main;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author iPeer
 */
public class MainGUI extends javax.swing.JFrame {
    
    private final ArrayList<Object[]> cachedGameList = new ArrayList<Object[]>();
    
    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
	initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameTableMenu = new javax.swing.JPopupMenu();
        playGame = new javax.swing.JMenuItem();
        viewStats = new javax.swing.JMenuItem();
        viewStore = new javax.swing.JMenuItem();
        viewHub = new javax.swing.JMenuItem();
        addWindowListener(new ExitHandler(this));
        steamUsername = new javax.swing.JTextField();
        grabStatsButton = new javax.swing.JButton();
        exportStatsButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        gameTablePane = new javax.swing.JScrollPane();
        gameTable = new javax.swing.JTable() {
            public boolean isCellEditable(int row, int column) {
                return /*column == 1 ? true : */false;
            }; }
            ;
            showGameTiles = new javax.swing.JCheckBox();
            gameStatsLabel = new javax.swing.JLabel();
            updateAvailable = new javax.swing.JLabel();
            whatToPlay = new javax.swing.JButton();
            tableAutoScroll = new javax.swing.JCheckBox();

            playGame.setText("Launch Game");
            playGame.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    playGameActionPerformed(evt);
                }
            });
            gameTableMenu.add(playGame);

            viewStats.setText("View Stats");
            viewStats.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    viewStatsActionPerformed(evt);
                }
            });
            gameTableMenu.add(viewStats);

            viewStore.setText("View On Store");
            viewStore.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    viewStoreActionPerformed(evt);
                }
            });
            gameTableMenu.add(viewStore);

            viewHub.setText("View Community Hub");
            viewHub.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    viewHubActionPerformed(evt);
                }
            });
            gameTableMenu.add(viewHub);

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("Steam Game Stats");
            setMinimumSize(new java.awt.Dimension(830, 522));

            steamUsername.setText("Steam Username");
            steamUsername.setToolTipText("");
            steamUsername.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

            grabStatsButton.setText("Grab Stats");
            grabStatsButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    grabStatsButtonActionPerformed(evt);
                }
            });

            exportStatsButton.setText("Export");
            exportStatsButton.setEnabled(false);
            exportStatsButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    exportStatsButtonActionPerformed(evt);
                }
            });

            exitButton.setText("Exit");
            exitButton.setActionCommand("CANCEL");
            exitButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    exitButtonActionPerformed(evt);
                }
            });

            progressBar.setMinimumSize(new java.awt.Dimension(146, 17));
            progressBar.setPreferredSize(new java.awt.Dimension(146, 17));
            progressBar.setString("");

            gameTablePane.setAutoscrolls(true);

            gameTable.setAutoCreateRowSorter(true);
            gameTable.addMouseListener(

                new MouseAdapter() {

                    //public void mouseClicked(MouseEvent e) {
                        //	JTable table = (JTable)e.getSource();
                        //	Point point = e.getPoint();
                        //	int column = table.columnAtPoint(point);
                        //	int row = table.rowAtPoint(point);
                        //	DefaultTableModel model = ((DefaultTableModel)table.getModel());
                        //	if ((model.getColumnName(column).equals("Store URL") || model.getColumnName(column).equals("Stats URL") || model.getColumnName(column).equals("Hub URL")) && !table.getValueAt(row, column).equals("--") && clickableURLsEnabled())
                        //	    try {
                            //		Desktop.getDesktop().browse(new URL(table.getValueAt(row, column).toString()).toURI());
                            //	    }
                        //	    catch (Exception e1) {
                            //		JOptionPane.showMessageDialog(table.getRootPane(), "Couldn't launch URL!\n"+e1.toString(), "Unable to open URL", JOptionPane.ERROR_MESSAGE);
                            //	    }
                        //
                        //    }

                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.isPopupTrigger()) {
                            JTable source = (JTable)e.getSource();
                            Point point = e.getPoint();
                            int row = source.rowAtPoint(point);
                            int column = source.columnAtPoint(point);
                            String gameName = source.getModel().getValueAt(row, (showGameTiles.isSelected() ? 2 : 1)).toString();
                            playGame.setText("Launch "+gameName);
                            if (!source.isRowSelected(row))
                            source.changeSelection(row, column, false, false);
                            gameTableMenu.show(source, e.getX(), e.getY());

                        }
                    }

                }

            );
            //for (int x = 0; x < gameTable.getColumnCount(); x++) {
                //	gameTable.getColumnModel().getColumn(x).setMinWidth((x == 1 ? 500 : 100));;
                //    }
            gameTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            gameTable.setAutoscrolls(false);
            gameTablePane.setViewportView(gameTable);

            showGameTiles.setText("Show game image column");
            showGameTiles.setToolTipText("Note: Enabling this feature may drastically slow down how fast the table gets populated.");

            gameStatsLabel.setToolTipText("");
            gameStatsLabel.setMinimumSize(new java.awt.Dimension(782, 14));
            gameStatsLabel.setName(""); // NOI18N
            gameStatsLabel.setPreferredSize(new java.awt.Dimension(782, 14));

            updateAvailable.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            updateAvailable.setText("v"+UpdateCheck.thisVersion);
            updateAvailable.setToolTipText("");

            whatToPlay.setText("What Should I Play?");
            whatToPlay.setToolTipText("Picks a random game from your library to play.");
            whatToPlay.setEnabled(false);
            whatToPlay.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    whatToPlayActionPerformed(evt);
                }
            });

            tableAutoScroll.setVisible(false);
            tableAutoScroll.setText("Autoscroll table");

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(steamUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                .addComponent(grabStatsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(exportStatsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(whatToPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(showGameTiles)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(tableAutoScroll)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(updateAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(gameStatsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE)
                        .addComponent(gameTablePane)
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(10, 10, 10))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(steamUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(showGameTiles)
                        .addComponent(updateAvailable)
                        .addComponent(tableAutoScroll))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(grabStatsButton)
                        .addComponent(exportStatsButton)
                        .addComponent(exitButton)
                        .addComponent(whatToPlay))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(gameStatsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(gameTablePane)
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents
    
    private void grabStatsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabStatsButtonActionPerformed
	if (steamUsername.getText().equals("Steam Username") || steamUsername.getText().equals("") || steamUsername.getText() == null) {
	    JOptionPane.showMessageDialog(rootPane, "You need to enter your Steam username or user ID!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
	    return;
	}
	new Thread(
		new Runnable() {
		    public void run() {
			downloadData();
		    }
		}).start();
    }//GEN-LAST:event_grabStatsButtonActionPerformed
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
	saveSettings();
	System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    
    private void exportStatsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportStatsButtonActionPerformed
	ExportGUI gui = new ExportGUI(this);
	gui.setModal(true);
	gui.setLocationRelativeTo(this.getRootPane());
	gui.setVisible(true);
    }//GEN-LAST:event_exportStatsButtonActionPerformed
    
    private void whatToPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whatToPlayActionPerformed
	WhatToPlayGUI wtp = new WhatToPlayGUI(this);
	wtp.setModal(true);
	wtp.setLocationRelativeTo(this.getRootPane());
	wtp.setGameCache(cachedGameList);
	wtp.pickGame();
	wtp.setVisible(true);
    }//GEN-LAST:event_whatToPlayActionPerformed
    
    private void playGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playGameActionPerformed
	handleContext("play", evt);
    }//GEN-LAST:event_playGameActionPerformed
    
    private void viewStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewStatsActionPerformed
	handleContext("stats", evt);
    }//GEN-LAST:event_viewStatsActionPerformed
    
    private void viewStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewStoreActionPerformed
	handleContext("store", evt);
    }//GEN-LAST:event_viewStoreActionPerformed
    
    private void viewHubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHubActionPerformed
	handleContext("hub", evt);
    }//GEN-LAST:event_viewHubActionPerformed
    
    private void handleContext(String type, ActionEvent evt) {
	
	Component source = (Component)evt.getSource();
	JPopupMenu menu = (JPopupMenu)source.getParent();
	JTable table = (JTable)menu.getInvoker();
	HashMap<String, String> values = new HashMap<String, String>();
	for (int x = 0; x < table.getColumnCount(); x++) {
	    if (showGameTiles.isSelected() && x == 1)
		continue;
	    values.put(table.getColumnName(x), table.getModel().getValueAt(table.getSelectedRow(), x).toString());
	}
	
	String URI = "";
	if (type.equals("play"))
	    URI = "steam://run/"+values.get("App ID");
	else if (type.equals("stats"))
	    URI = values.get("Stats URL");
	else if (type.equals("store"))
	    URI = values.get("Store URL");
	else if (type.equals("hub"))
	    URI = values.get("Hub URL");
	try {
	    Desktop.getDesktop().browse(new URI(URI));
	}
	catch (Throwable e) {
	    JOptionPane.showMessageDialog(rootPane, "Couldn't launch the URI '"+URI+"'.\n"+e.toString(), "Oops!", JOptionPane.ERROR_MESSAGE);
	}
	
	
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	* For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
	*/
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if (System.getProperty("os.name").contains(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>
	
	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	    public void run() {
		final MainGUI gui = new MainGUI();
		try {
		    File f;
		    if ((f = new File("config.cfg")).exists())
			gui.config.load(new FileInputStream(f));
		} catch (IOException ex) {
		    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
		if (args.length > 0 && (args[0].equals("-username") || args[0].equals("-profileid")) && !args[1].equals(""))
		    gui.steamUsername.setText(args[1]);
		else
		    gui.steamUsername.setText(gui.config.getProperty("lastUsername", "Steam Username"));
		gui.showGameTiles.setSelected(gui.config.getProperty("allowURLClicks", "true").equals("true"));
		gui.setLocationRelativeTo(null);
		gui.setVisible(true);
		new Thread(
			new Runnable() {
			    public void run() {
				new UpdateCheck(gui).checkForUpdates();
			    }
			}).start();
	    }
	});
    }
    
    public void downloadData() {
	try {
	    progressBar.setStringPainted(true);
	    progressBar.setIndeterminate(true);
	    cachedGameList.clear();
	    String columns = "App ID,"+(showGameTiles.isSelected() ? "," : "")+"Game Name,Hours Played,Hours Played (last 2wks),Stats URL,Store URL,Hub URL,Thumbnail URL";
		    gameTable.setModel(new javax.swing.table.DefaultTableModel(
		    new Object [][] {
			
		    },
		    columns.split(",")
	    ));
	    progressBar.setString("Waiting for Steam...");
	    grabStatsButton.setEnabled(false);
	    exportStatsButton.setEnabled(false);
	    whatToPlay.setEnabled(false);
	    showGameTiles.setEnabled(false);
	    
	    
	    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	    DocumentBuilder builder = factory.newDocumentBuilder();
	    Document doc = builder.newDocument();
	    try {
		doc = builder.parse("http://steamcommunity.com/profiles/"+Long.parseLong(steamUsername.getText())+"/games?tab=all&xml=1");
	    }
	    catch (NumberFormatException e) {
		doc = builder.parse("http://steamcommunity.com/id/"+steamUsername.getText()+"/games?tab=all&xml=1");
	    }
	    Element element = doc.getDocumentElement();
	    element.normalize();
	    
	    if (element.getElementsByTagName("response").getLength() > 0) { // Couldn't get data
		
	    }
	    gameTable.setRowHeight(16);
	    NodeList gameList = element.getElementsByTagName("game");
	    progressBar.setIndeterminate(false);
	    progressBar.setMaximum(gameList.getLength());
	    progressBar.setString("Downloading data...");
	    float last2weeks = 0f;
	    float alltime = 0f;
	    for (int x = 0; x < gameList.getLength(); x++) {
		NodeList children = gameList.item(x).getChildNodes();
		String appID = ((Element)children).getElementsByTagName("appID").item(0).getChildNodes().item(0).getNodeValue();
		String gameTitle = ((Element)children).getElementsByTagName("name").item(0).getChildNodes().item(0).getNodeValue();
		progressBar.setString("Downloading data ("+gameTitle+")...");
		//System.err.println(gameTitle);
		String storeURL = ((Element)children).getElementsByTagName("storeLink").item(0).getChildNodes().item(0).getNodeValue();
		String statsURL = "";
		try {
		    statsURL = ((Element)children).getElementsByTagName("statsLink").item(0).getChildNodes().item(0).getNodeValue();
		} catch (NullPointerException e) {
		    statsURL = "--";
		}
		String hoursLast2Wks = "";
		try {
		    hoursLast2Wks = ((Element)children).getElementsByTagName("hoursLast2Weeks").item(0).getChildNodes().item(0).getNodeValue();
		} catch (NullPointerException e) {
		    hoursLast2Wks = "0";
		}
		last2weeks += Float.parseFloat(hoursLast2Wks.replaceAll(",", ""));
		String hoursAllTime = "";
		try {
		    hoursAllTime = ((Element)children).getElementsByTagName("hoursOnRecord").item(0).getChildNodes().item(0).getNodeValue();
		} catch (NullPointerException e) {
		    hoursAllTime = "0";
		}
		alltime += Float.parseFloat(hoursAllTime.replaceAll(",", ""));
		String logoLink = ((Element)children).getElementsByTagName("logo").item(0).getChildNodes().item(0).getNodeValue();
		Object[] rowData = {appID, gameTitle, hoursAllTime, hoursLast2Wks, statsURL, storeURL.replaceAll("steamcommunity", "store.steampowered"), storeURL, logoLink};
		cachedGameList.add(rowData);
		if (showGameTiles.isSelected()) {
		    Object[] rowData2 = new Object[rowData.length + 1];
		    for (int i = 0; i < rowData2.length; i++) {
			if (i == 1)
			    continue;
			rowData2[i] = rowData[(i > 1 ? i - 1 : i)];
		    }
		    rowData = new Object[rowData2.length];
		    rowData = rowData2;
		    // We have to convert the image to bytes because Java.
		    ByteArrayOutputStream baos = new ByteArrayOutputStream();
		    ImageIO.write(ImageIO.read(new URL(rowData[8].toString())), "jpg", baos);
		    rowData[1] = baos.toByteArray();
		    gameTable.getColumnModel().getColumn(1).setCellRenderer(new ImageRenderer());
		}
		((DefaultTableModel)gameTable.getModel()).insertRow(gameTable.getRowCount(), rowData);
		((DefaultTableModel)gameTable.getModel()).fireTableDataChanged();
		if (tableAutoScroll.isSelected()) {
		    gameTable.getSelectionModel().setSelectionInterval(gameTable.getRowCount() + 1, gameTable.getRowCount() + 1);
		    gameTable.scrollRectToVisible(gameTable.getCellRect(gameTable.getRowCount() + 1, 0, true));
		}
		updateColumnWidths(rowData);
		progressBar.setValue(x);
	    }
	    resetControls();
	    gameStatsLabel.setText(String.format("<html>Found <font color=#4184ff>%,d</font> games totalling <font color=#4184ff>%,.1f</font> hours played in the last 2 weeks and <font color=#4184ff>%,.1f</font> played since the begining of time.</html>", gameTable.getRowCount(), last2weeks, alltime));
	    
	} catch (SAXException ex) {
	    if (ex.getMessage().contains("Element type \"scr\" must be followed by either attribute specifications, \">\" or \"/>\".")) {
		resetControls();
		JOptionPane.showMessageDialog(rootPane, "Couldn't get your game list because your profile appears to be private.", "Couldn't get games", JOptionPane.ERROR_MESSAGE);
		ex.printStackTrace();
		return;
	    }
	    resetControls();
	    JOptionPane.showMessageDialog(rootPane, "An error ocurred when attempting to reach Steam:\n"+ex.toString(), "Oops!", JOptionPane.ERROR_MESSAGE);
	    ex.printStackTrace();
	} catch (Throwable ex) {
	    resetControls();
	    JOptionPane.showMessageDialog(rootPane, "An error ocurred when attempting to reach Steam:\n"+ex.toString(), "Oops!", JOptionPane.ERROR_MESSAGE);
	    ex.printStackTrace();
	}
	
    }
    
    public void updateColumnWidths(Object[] data) {
	for (int x = 0; x < data.length; x++) {
	    if (x == 1 && showGameTiles.isSelected()) {
		gameTable.getColumnModel().getColumn(x).setMinWidth(185);
		gameTable.setRowHeight(70);
		continue;
	    }
	    int columnWidth = gameTable.getColumnModel().getColumn(x).getWidth();
	    int textWidth = rootPane.getGraphics().getFontMetrics().stringWidth(data[x].toString());
	    if (columnWidth < textWidth)
		gameTable.getColumnModel().getColumn(x).setMinWidth(textWidth);
	}
    }
    
    public void resetControls() {
	progressBar.setValue(0);
	progressBar.setMaximum(0);
	grabStatsButton.setEnabled(true);
	exportStatsButton.setEnabled(true);
	whatToPlay.setEnabled(true);
	progressBar.setIndeterminate(false);
	progressBar.setString("");
	progressBar.setStringPainted(false);
	showGameTiles.setEnabled(true);
    }
    
    public boolean clickableURLsEnabled() {
	return showGameTiles.isSelected();
    }
    
    public void announceUpdate(double newVersion) {
	//updateAvailable.setVisible(true);
	updateAvailable.setEnabled(true);
	updateAvailable.setForeground(new java.awt.Color(0, 102, 0));
	updateAvailable.setText("Update Available!");
	if (JOptionPane.showConfirmDialog(rootPane, "An update is available for this project. Do you want to download it now?", "Update Found!", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
	    try {
		Desktop.getDesktop().browse(new URL("http://ipeer.auron.co.uk/projects/sgs").toURI());
	    }
	    catch (Exception e) {
		JOptionPane.showMessageDialog(rootPane, "Couldn't launch update page.\n"+e.toString(), "Oops!", JOptionPane.ERROR_MESSAGE);
	    }
    }
    
    public void performExport(int i, HashMap<String, Boolean> boxes) {
	progressBar.setIndeterminate(true);
	progressBar.setString("Preparing...");
	progressBar.setStringPainted(true);
	//if (i > 0 && i < 3) { // Text and CSV
	FileWriter writer = null;
	try {
	    progressBar.setMaximum(gameTable.getRowCount() * gameTable.getColumnCount());
	    String outPath = getJarPath().substring(0, getJarPath().lastIndexOf("/"))+"/exports/";
	    File outDir = new File(outPath);
	    if (!outDir.exists())
		outDir.mkdirs();
	    File outFile = new File(outDir, steamUsername.getText()+(i == 2 ? ".csv" : ".txt"));
	    if (outFile.exists())
		outFile.renameTo(new File(outDir, steamUsername.getText()+"-"+System.currentTimeMillis()+(i == 1 ? ".txt" : ".csv")));
	    writer = new FileWriter(outFile);
	    progressBar.setIndeterminate(false);
	    progressBar.setStringPainted(false);
	    if (i == 2) {
		String headers = "";
		for (int x1 = 0; x1 < gameTable.getColumnCount(); x1++) {
		    if (boxes.get(gameTable.getColumnName(x1)))
			headers += (headers.length() > 0 ? "," : "")+gameTable.getColumnName(x1);
		}
		writer.append(headers+"\n");
	    }
	    String outString = "";
	    boolean a = false;
	    for (int x = 0; x < gameTable.getRowCount(); x++) {
		a = false;
		for (int x1 = 0; x1 < gameTable.getColumnCount(); x1++) {
		    if (boxes.get(gameTable.getColumnName(x1))) {
			outString += (a ? (i == 2 ? "," : "\t") : "")+gameTable.getValueAt(x, x1);
			a = true;
		    }
		    progressBar.setValue(x * x1);
		}
		outString += "\n";
	    }
	    writer.write(outString+"\n");
	    writer.close();
	    if (i == 3) { // Upload to pastebin
		final String API_KEY = "3d4aac936d0e905b694dfdf20e500342";
		URL pasteBin = new URL("http://pastebin.com/api/api_post.php");
		progressBar.setString("Posting to Pastebin.com...");
		progressBar.setStringPainted(true);
		progressBar.setIndeterminate(true);
		HttpURLConnection con = (HttpURLConnection)pasteBin.openConnection();
		con.setDoOutput(true);
		con.setDoInput(true);
		con.setInstanceFollowRedirects(false);
		con.setRequestMethod("POST");
		con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
		String pasteName = URLEncoder.encode("Steam Game Stats for "+steamUsername.getText(), "UTF-8");
		String pasteContents = URLEncoder.encode(outString, "UTF-8");
		String uri = "api_option=paste&api_dev_key="+API_KEY+"&api_paste_name="+pasteName+"&api_paste_code="+pasteContents;
		con.setRequestProperty("charset", "utf-8");
		con.setRequestProperty("Content-Length", Integer.toString(uri.getBytes(Charset.forName("UTF-8")).length));
		
		DataOutputStream out = new DataOutputStream(con.getOutputStream());
		out.write(uri.getBytes(Charset.forName("UTF-8")));
		out.flush();
		BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
		String line = "";
		while ((line = in.readLine()) != null) {
		    if (line.contains("Bad API request")) {
			JOptionPane.showMessageDialog(rootPane, "The pastebin API replied with a bad response:\n"+line, "Oops!", JOptionPane.ERROR_MESSAGE);
		    }
		    else {
			int response = JOptionPane.showConfirmDialog(rootPane, "Your data has been uploaded to pastebin successfully.\nFor easy access purposes, a copy of this data has also been saved to your hard disk in the following location:\n"+outFile.getAbsolutePath()+"\nYour pastebin version of this data can be viewd at the following URL:\n"+line+"\nDo you want to open this URL now?", "Export complete", JOptionPane.YES_NO_OPTION);
			if (response == JOptionPane.YES_OPTION)
			    try {
				Desktop.getDesktop().browse(new URI(line));
			    }
			    catch (Exception e) {
				JOptionPane.showMessageDialog(rootPane, "Couldn't open webpage for your pastebin link\n"+e.toString(), "Oops!", JOptionPane.ERROR_MESSAGE);
			    }
		    }
		}
		out.close();
		in.close();
		con.disconnect();
		
	    }
	    if (i < 3 && JOptionPane.showConfirmDialog(rootPane, "Your data has been written to the following file:\n"+outFile.getAbsolutePath()+"\nDo you want to view this file now?", "Export complete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
		try {
		    Desktop.getDesktop().open(outFile);
		}
		catch (Exception e) {
		    JOptionPane.showMessageDialog(rootPane, "Couldn't open the file, please navigate to its location and open it manually.\nThe file is located at:\n"+outFile.getAbsolutePath(), "Oops!", JOptionPane.ERROR_MESSAGE);
		}
	} catch (IOException ex) {
	    JOptionPane.showMessageDialog(rootPane, "There was an issue writing the data to file.\n"+ex.toString(), "Oops!", JOptionPane.ERROR_MESSAGE);
	}
	resetControls();
    }
    
    public String getJarPath() {
	try {
	    return MainGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
	} catch (Exception e) {
	    return MainGUI.class.getProtectionDomain().getCodeSource().getLocation().getPath();
	}
    }
    
    public void saveSettings() {
	this.config.setProperty("lastUsername", this.steamUsername.getText());
	this.config.setProperty("allowURLClicks", Boolean.toString(this.showGameTiles.isSelected()));
	try {
	    this.config.store(new FileOutputStream(new File("config.cfg")), "Config file for SteamGameStats");
	} catch (IOException ex) {
	    // Couldn't save settings
	}
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exportStatsButton;
    private javax.swing.JLabel gameStatsLabel;
    private javax.swing.JTable gameTable;
    private javax.swing.JPopupMenu gameTableMenu;
    private javax.swing.JScrollPane gameTablePane;
    private javax.swing.JButton grabStatsButton;
    private javax.swing.JMenuItem playGame;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JCheckBox showGameTiles;
    private javax.swing.JTextField steamUsername;
    private javax.swing.JCheckBox tableAutoScroll;
    private javax.swing.JLabel updateAvailable;
    private javax.swing.JMenuItem viewHub;
    private javax.swing.JMenuItem viewStats;
    private javax.swing.JMenuItem viewStore;
    private javax.swing.JButton whatToPlay;
    // End of variables declaration//GEN-END:variables
    public Properties config = new Properties();
}
